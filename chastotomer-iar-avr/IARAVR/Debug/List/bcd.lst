###############################################################################
#                                                                             #
# IAR Atmel AVR C/C++ Compiler V5.11B/W32               06/Mar/2011  17:06:42 #
# Copyright 1996-2008 IAR Systems. All rights reserved.                       #
#                                                                             #
#    Source file  =  K:\дело\сайт\заготовки\Мои статьи\Частотомер на          #
#                    микроконтроллере\Сym_Proj\IARAVR\bcd.c                   #
#    Command line =  "K:\дело\сайт\заготовки\Мои статьи\Частотомер на         #
#                    микроконтроллере\Сym_Proj\IARAVR\bcd.c" --cpu=m8535 -ms  #
#                    -o "K:\дело\сайт\заготовки\Мои статьи\Частотомер на      #
#                    микроконтроллере\Сym_Proj\IARAVR\Debug\Obj\" -lCN        #
#                    "K:\дело\сайт\заготовки\Мои статьи\Частотомер на         #
#                    микроконтроллере\Сym_Proj\IARAVR\Debug\List\"            #
#                    --initializers_in_flash -s9 --debug                      #
#                    -DENABLE_BIT_DEFINITIONS -e -I "C:\Program Files\IAR     #
#                    Systems\Embedded Workbench 5.0\avr\INC\" -I "C:\Program  #
#                    Files\IAR Systems\Embedded Workbench 5.0\avr\INC\CLIB\"  #
#                    --eeprom_size 512                                        #
#    List file    =  K:\дело\сайт\заготовки\Мои статьи\Частотомер на          #
#                    микроконтроллере\Сym_Proj\IARAVR\Debug\List\bcd.lst      #
#    Object file  =  K:\дело\сайт\заготовки\Мои статьи\Частотомер на          #
#                    микроконтроллере\Сym_Proj\IARAVR\Debug\Obj\bcd.r90       #
#                                                                             #
#                                                                             #
###############################################################################

K:\дело\сайт\заготовки\Мои статьи\Частотомер на микроконтроллере\Сym_Proj\IARAVR\bcd.c
      1          #include "bcd.h"
      2          

   \                                 In  segment NEAR_Z, align 1, keep-with-next
   \   00000000                      REQUIRE `?<Segment init: NEAR_Z>`
      3          unsigned char buf[MAX_SIZE];
   \                     buf:
   \   00000000                      DS 8
      4          

   \                                 In  segment CODE, align 2, keep-with-next
      5          void BCD_LongLcd(unsigned long value, unsigned char size, unsigned char comma)
   \                     BCD_LongLcd:
      6          {
   \   00000000   929A               ST      -Y, R9
   \   00000002   928A               ST      -Y, R8
   \   00000004   927A               ST      -Y, R7
   \   00000006   926A               ST      -Y, R6
   \   00000008   925A               ST      -Y, R5
   \   0000000A   924A               ST      -Y, R4
   \   0000000C   93BA               ST      -Y, R27
   \   0000000E   93AA               ST      -Y, R26
   \   00000010   939A               ST      -Y, R25
   \   00000012   938A               ST      -Y, R24
   \   00000014                      REQUIRE ?Register_R4_is_cg_reg
   \   00000014                      REQUIRE ?Register_R5_is_cg_reg
   \   00000014                      REQUIRE ?Register_R6_is_cg_reg
   \   00000014                      REQUIRE ?Register_R7_is_cg_reg
   \   00000014                      REQUIRE ?Register_R8_is_cg_reg
   \   00000014                      REQUIRE ?Register_R9_is_cg_reg
   \   00000014   01C8               MOVW    R25:R24, R17:R16
   \   00000016   01D9               MOVW    R27:R26, R19:R18
   \   00000018   2E54               MOV     R5, R20
   \   0000001A   2E85               MOV     R8, R21
      7            for(unsigned char i = 0; i<MAX_SIZE; i++){
   \   0000001C   ....               LDI     R16, LOW(buf)
   \   0000001E   2E60               MOV     R6, R16
   \   00000020   ....               LDI     R16, (buf) >> 8
   \   00000022   2E70               MOV     R7, R16
   \   00000024   E008               LDI     R16, 8
   \   00000026   2E40               MOV     R4, R16
      8              buf[i] = (unsigned char)((value % 10) + 48);
   \                     ??BCD_LongLcd_0:
   \   00000028   E04A               LDI     R20, 10
   \   0000002A   E050               LDI     R21, 0
   \   0000002C   E060               LDI     R22, 0
   \   0000002E   E070               LDI     R23, 0
   \   00000030   018C               MOVW    R17:R16, R25:R24
   \   00000032   019D               MOVW    R19:R18, R27:R26
   \   00000034   ....               RCALL   ?UL_DIVMOD_L03
   \   00000036   5D40               SUBI    R20, 208
   \   00000038   01F3               MOVW    R31:R30, R7:R6
   \   0000003A   9341               ST      Z+, R20
   \   0000003C   013F               MOVW    R7:R6, R31:R30
      9              value = value/10;
   \   0000003E   E04A               LDI     R20, 10
   \   00000040   E050               LDI     R21, 0
   \   00000042   E060               LDI     R22, 0
   \   00000044   E070               LDI     R23, 0
   \   00000046   018C               MOVW    R17:R16, R25:R24
   \   00000048   019D               MOVW    R19:R18, R27:R26
   \   0000004A   ....               RCALL   ?UL_DIVMOD_L03
   \   0000004C   01C8               MOVW    R25:R24, R17:R16
   \   0000004E   01D9               MOVW    R27:R26, R19:R18
     10            }
   \   00000050   944A               DEC     R4
   \   00000052   F751               BRNE    ??BCD_LongLcd_0
     11            for(unsigned char i = 0; i<size; i++){
   \   00000054   E0A0               LDI     R26, 0
   \   00000056   2055               TST     R5
   \   00000058   F0C1               BREQ    ??BCD_LongLcd_1
   \   0000005A   E088               LDI     R24, 8
   \   0000005C   E090               LDI     R25, 0
   \   0000005E   2499               CLR     R9
   \   00000060   1988               SUB     R24, R8
   \   00000062   4090               SBCI    R25, 0
     12              if (comma){
   \                     ??BCD_LongLcd_2:
   \   00000064   2E6A               MOV     R6, R26
   \   00000066   2477               CLR     R7
   \   00000068   2088               TST     R8
   \   0000006A   F029               BREQ    ??BCD_LongLcd_3
     13                if (i == MAX_SIZE-comma) LcdSendData(',');
   \   0000006C   1668               CP      R6, R24
   \   0000006E   0679               CPC     R7, R25
   \   00000070   F411               BRNE    ??BCD_LongLcd_3
   \   00000072   E20C               LDI     R16, 44
   \   00000074   ....               RCALL   LCD_WriteData
     14              }
     15              LcdSendData(buf[(MAX_SIZE-1)-i]);
   \                     ??BCD_LongLcd_3:
   \   00000076   9461               NEG     R6
   \   00000078   0879               SBC     R7, R9
   \   0000007A   01F3               MOVW    R31:R30, R7:R6
   \   0000007C   ....               SUBI    R30, LOW((-(buf) & 0xFFFF))
   \   0000007E   ....               SBCI    R31, (-(buf) & 0xFFFF) >> 8
   \   00000080   8107               LDD     R16, Z+7
   \   00000082   ....               RCALL   LCD_WriteData
     16            }
   \   00000084   95A3               INC     R26
   \   00000086   15A5               CP      R26, R5
   \   00000088   F368               BRCS    ??BCD_LongLcd_2
     17          }
   \                     ??BCD_LongLcd_1:
   \   0000008A   9189               LD      R24, Y+
   \   0000008C   9199               LD      R25, Y+
   \   0000008E   91A9               LD      R26, Y+
   \   00000090   91B9               LD      R27, Y+
   \   00000092   9049               LD      R4, Y+
   \   00000094   9059               LD      R5, Y+
   \   00000096   9069               LD      R6, Y+
   \   00000098   9079               LD      R7, Y+
   \   0000009A   9089               LD      R8, Y+
   \   0000009C   9099               LD      R9, Y+
   \   0000009E   9508               RET

   Maximum stack usage in bytes:

     Function           CSTACK RSTACK
     --------           ------ ------
     BCD_LongLcd           10      4
       -> LCD_WriteData    10      2
       -> LCD_WriteData    10      2


   Segment part sizes:

     Function/Label Bytes
     -------------- -----
     buf               8
     BCD_LongLcd     160
      Others           6

 
 160 bytes in segment CODE
   6 bytes in segment INITTAB
   8 bytes in segment NEAR_Z
 
 160 bytes of CODE memory (+ 6 bytes shared)
   8 bytes of DATA memory

Errors: none
Warnings: none
