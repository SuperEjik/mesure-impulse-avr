
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007b2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000002a  00800060  00800060  00000826  2**0
                  ALLOC
  2 .debug_aranges 000000d0  00000000  00000000  00000826  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000001d9  00000000  00000000  000008f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000ccd  00000000  00000000  00000acf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000039f  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000009a8  00000000  00000000  00001b3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000120  00000000  00000000  000024e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000029f  00000000  00000000  00002604  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000034c  00000000  00000000  000028a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000002a8  00000000  00000000  00002bef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
  PORT_DATA = data;		
#endif  
  SetBit(PORT_SIG, EN);	        
  _delay_us(2);
  ClearBit(PORT_SIG, EN);	
}
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	23 c0       	rjmp	.+70     	; 0x4a <__bad_interrupt>
   4:	22 c0       	rjmp	.+68     	; 0x4a <__bad_interrupt>
   6:	21 c0       	rjmp	.+66     	; 0x4a <__bad_interrupt>
   8:	20 c0       	rjmp	.+64     	; 0x4a <__bad_interrupt>
   a:	1f c0       	rjmp	.+62     	; 0x4a <__bad_interrupt>
   c:	1e c0       	rjmp	.+60     	; 0x4a <__bad_interrupt>
   e:	1d c0       	rjmp	.+58     	; 0x4a <__bad_interrupt>
  10:	21 c1       	rjmp	.+578    	; 0x254 <__vector_8>
  12:	37 c1       	rjmp	.+622    	; 0x282 <__vector_9>
  14:	1a c0       	rjmp	.+52     	; 0x4a <__bad_interrupt>
  16:	19 c0       	rjmp	.+50     	; 0x4a <__bad_interrupt>
  18:	18 c0       	rjmp	.+48     	; 0x4a <__bad_interrupt>
  1a:	17 c0       	rjmp	.+46     	; 0x4a <__bad_interrupt>
  1c:	16 c0       	rjmp	.+44     	; 0x4a <__bad_interrupt>
  1e:	15 c0       	rjmp	.+42     	; 0x4a <__bad_interrupt>
  20:	14 c0       	rjmp	.+40     	; 0x4a <__bad_interrupt>
  22:	13 c0       	rjmp	.+38     	; 0x4a <__bad_interrupt>
  24:	12 c0       	rjmp	.+36     	; 0x4a <__bad_interrupt>
  26:	11 c0       	rjmp	.+34     	; 0x4a <__bad_interrupt>
  28:	10 c0       	rjmp	.+32     	; 0x4a <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d2 e0       	ldi	r29, 0x02	; 2
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_clear_bss>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	01 c0       	rjmp	.+2      	; 0x40 <.do_clear_bss_start>

0000003e <.do_clear_bss_loop>:
  3e:	1d 92       	st	X+, r1

00000040 <.do_clear_bss_start>:
  40:	aa 38       	cpi	r26, 0x8A	; 138
  42:	b1 07       	cpc	r27, r17
  44:	e1 f7       	brne	.-8      	; 0x3e <.do_clear_bss_loop>
  46:	89 d0       	rcall	.+274    	; 0x15a <main>
  48:	b2 c3       	rjmp	.+1892   	; 0x7ae <_exit>

0000004a <__bad_interrupt>:
  4a:	da cf       	rjmp	.-76     	; 0x0 <__vectors>

0000004c <BCD_LongLcd>:
#include "bcd.h"

unsigned char buf[MAX_SIZE];

void BCD_LongLcd(unsigned long value, unsigned char size, unsigned char comma)
{
  4c:	8f 92       	push	r8
  4e:	9f 92       	push	r9
  50:	af 92       	push	r10
  52:	bf 92       	push	r11
  54:	cf 92       	push	r12
  56:	df 92       	push	r13
  58:	ef 92       	push	r14
  5a:	ff 92       	push	r15
  5c:	0f 93       	push	r16
  5e:	1f 93       	push	r17
  60:	cf 93       	push	r28
  62:	df 93       	push	r29
  64:	e6 2e       	mov	r14, r22
  66:	f7 2e       	mov	r15, r23
  68:	08 2f       	mov	r16, r24
  6a:	19 2f       	mov	r17, r25
  6c:	84 2e       	mov	r8, r20
  6e:	92 2e       	mov	r9, r18
  70:	c6 e7       	ldi	r28, 0x76	; 118
  72:	d0 e0       	ldi	r29, 0x00	; 0
  for(unsigned char i = 0; i<MAX_SIZE; i++){
  74:	0f 2e       	mov	r0, r31
  76:	fe e7       	ldi	r31, 0x7E	; 126
  78:	cf 2e       	mov	r12, r31
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	df 2e       	mov	r13, r31
  7e:	f0 2d       	mov	r31, r0
    buf[i] = (unsigned char)((value % 10) + 48);
  80:	6e 2d       	mov	r22, r14
  82:	7f 2d       	mov	r23, r15
  84:	80 2f       	mov	r24, r16
  86:	91 2f       	mov	r25, r17
  88:	2a e0       	ldi	r18, 0x0A	; 10
  8a:	30 e0       	ldi	r19, 0x00	; 0
  8c:	40 e0       	ldi	r20, 0x00	; 0
  8e:	50 e0       	ldi	r21, 0x00	; 0
  90:	6c d3       	rcall	.+1752   	; 0x76a <__udivmodsi4>
  92:	60 5d       	subi	r22, 0xD0	; 208
  94:	69 93       	st	Y+, r22
    value = value/10;
  96:	6e 2d       	mov	r22, r14
  98:	7f 2d       	mov	r23, r15
  9a:	80 2f       	mov	r24, r16
  9c:	91 2f       	mov	r25, r17
  9e:	2a e0       	ldi	r18, 0x0A	; 10
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	61 d3       	rcall	.+1730   	; 0x76a <__udivmodsi4>
  a8:	e2 2e       	mov	r14, r18
  aa:	f3 2e       	mov	r15, r19
  ac:	04 2f       	mov	r16, r20
  ae:	15 2f       	mov	r17, r21

unsigned char buf[MAX_SIZE];

void BCD_LongLcd(unsigned long value, unsigned char size, unsigned char comma)
{
  for(unsigned char i = 0; i<MAX_SIZE; i++){
  b0:	cc 15       	cp	r28, r12
  b2:	dd 05       	cpc	r29, r13
  b4:	29 f7       	brne	.-54     	; 0x80 <BCD_LongLcd+0x34>
    buf[i] = (unsigned char)((value % 10) + 48);
    value = value/10;
  }
  for(unsigned char i = 0; i<size; i++){
  b6:	88 20       	and	r8, r8
  b8:	e1 f0       	breq	.+56     	; 0xf2 <BCD_LongLcd+0xa6>
  ba:	0d e7       	ldi	r16, 0x7D	; 125
  bc:	10 e0       	ldi	r17, 0x00	; 0
  be:	c0 e0       	ldi	r28, 0x00	; 0
  c0:	d0 e0       	ldi	r29, 0x00	; 0
    if (comma){
      if (i == MAX_SIZE-comma) LcdSendData(',');
  c2:	c9 2c       	mov	r12, r9
  c4:	dd 24       	eor	r13, r13
  c6:	aa 24       	eor	r10, r10
  c8:	bb 24       	eor	r11, r11
  ca:	68 94       	set
  cc:	a3 f8       	bld	r10, 3
  ce:	75 01       	movw	r14, r10
  d0:	ec 18       	sub	r14, r12
  d2:	fd 08       	sbc	r15, r13
  for(unsigned char i = 0; i<MAX_SIZE; i++){
    buf[i] = (unsigned char)((value % 10) + 48);
    value = value/10;
  }
  for(unsigned char i = 0; i<size; i++){
    if (comma){
  d4:	99 20       	and	r9, r9
  d6:	29 f0       	breq	.+10     	; 0xe2 <BCD_LongLcd+0x96>
      if (i == MAX_SIZE-comma) LcdSendData(',');
  d8:	ce 15       	cp	r28, r14
  da:	df 05       	cpc	r29, r15
  dc:	11 f4       	brne	.+4      	; 0xe2 <BCD_LongLcd+0x96>
  de:	8c e2       	ldi	r24, 0x2C	; 44
  e0:	15 d0       	rcall	.+42     	; 0x10c <LCD_WriteData>
    }
    LcdSendData(buf[(MAX_SIZE-1)-i]);
  e2:	f8 01       	movw	r30, r16
  e4:	80 81       	ld	r24, Z
  e6:	12 d0       	rcall	.+36     	; 0x10c <LCD_WriteData>
  e8:	21 96       	adiw	r28, 0x01	; 1
  ea:	01 50       	subi	r16, 0x01	; 1
  ec:	10 40       	sbci	r17, 0x00	; 0
{
  for(unsigned char i = 0; i<MAX_SIZE; i++){
    buf[i] = (unsigned char)((value % 10) + 48);
    value = value/10;
  }
  for(unsigned char i = 0; i<size; i++){
  ee:	c8 15       	cp	r28, r8
  f0:	88 f3       	brcs	.-30     	; 0xd4 <BCD_LongLcd+0x88>
    if (comma){
      if (i == MAX_SIZE-comma) LcdSendData(',');
    }
    LcdSendData(buf[(MAX_SIZE-1)-i]);
  }
  f2:	df 91       	pop	r29
  f4:	cf 91       	pop	r28
  f6:	1f 91       	pop	r17
  f8:	0f 91       	pop	r16
  fa:	ff 90       	pop	r15
  fc:	ef 90       	pop	r14
  fe:	df 90       	pop	r13
 100:	cf 90       	pop	r12
 102:	bf 90       	pop	r11
 104:	af 90       	pop	r10
 106:	9f 90       	pop	r9
 108:	8f 90       	pop	r8
 10a:	08 95       	ret

0000010c <LCD_WriteData>:
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 10c:	9d e0       	ldi	r25, 0x0D	; 13
 10e:	9a 95       	dec	r25
 110:	f1 f7       	brne	.-4      	; 0x10e <LCD_WriteData+0x2>

//функция записи данных
void LCD_WriteData(unsigned char data)
{
  LCD_Wait();
  SetBit(PORT_SIG, RS);	    //установка RS в 1 - данные
 112:	e5 e3       	ldi	r30, 0x35	; 53
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	90 81       	ld	r25, Z
 118:	91 60       	ori	r25, 0x01	; 1
 11a:	90 83       	st	Z, r25

inline static void LCD_CommonFunc(unsigned char data)
{
#ifdef BUS_4BIT  
  unsigned char tmp; 
  tmp  = PORT_DATA & 0x0f;
 11c:	90 81       	ld	r25, Z
  tmp |= (data & 0xf0);
 11e:	28 2f       	mov	r18, r24
 120:	20 7f       	andi	r18, 0xF0	; 240
 122:	9f 70       	andi	r25, 0x0F	; 15
 124:	29 2b       	or	r18, r25

  PORT_DATA = tmp;		//вывод старшей тетрады 
 126:	20 83       	st	Z, r18
  SetBit(PORT_SIG, EN);	        
 128:	90 81       	ld	r25, Z
 12a:	94 60       	ori	r25, 0x04	; 4
 12c:	90 83       	st	Z, r25
 12e:	21 e0       	ldi	r18, 0x01	; 1
 130:	92 2f       	mov	r25, r18
 132:	9a 95       	dec	r25
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_WriteData+0x26>
  _delay_us(2);
  ClearBit(PORT_SIG, EN);	
 136:	90 81       	ld	r25, Z
 138:	9b 7f       	andi	r25, 0xFB	; 251
 13a:	90 83       	st	Z, r25

#define FLAG_BF 7

inline unsigned char __swap_nibbles(unsigned char data)
{
  asm volatile("swap %0" : "=r" (data) : "0" (data));
 13c:	82 95       	swap	r24
  SetBit(PORT_SIG, EN);	        
  _delay_us(2);
  ClearBit(PORT_SIG, EN);	

  data = __swap_nibbles(data);
  tmp  = PORT_DATA & 0x0f;
 13e:	90 81       	ld	r25, Z
  tmp |= (data & 0xf0);
 140:	80 7f       	andi	r24, 0xF0	; 240
 142:	9f 70       	andi	r25, 0x0F	; 15
 144:	89 2b       	or	r24, r25
 
  PORT_DATA = tmp;		//вывод младшей тетрады 
 146:	80 83       	st	Z, r24
  SetBit(PORT_SIG, EN);	        
 148:	80 81       	ld	r24, Z
 14a:	84 60       	ori	r24, 0x04	; 4
 14c:	80 83       	st	Z, r24
 14e:	2a 95       	dec	r18
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_WriteData+0x42>
  _delay_us(2);
  ClearBit(PORT_SIG, EN);	 
 152:	80 81       	ld	r24, Z
 154:	8b 7f       	andi	r24, 0xFB	; 251
 156:	80 83       	st	Z, r24
void LCD_WriteData(unsigned char data)
{
  LCD_Wait();
  SetBit(PORT_SIG, RS);	    //установка RS в 1 - данные
  LCD_CommonFunc(data);
}
 158:	08 95       	ret

0000015a <main>:
#include "bits_macros.h"

int i = 0;

int main(void)
{ 
 15a:	ef 92       	push	r14
 15c:	ff 92       	push	r15
 15e:	0f 93       	push	r16
 160:	1f 93       	push	r17
 162:	cf 93       	push	r28
 164:	df 93       	push	r29
  //LCD_Init();
  TIM_Init();
 166:	27 d0       	rcall	.+78     	; 0x1b6 <TIM_Init>
  
  //LCD_Goto(0,0);
  //LCD_SendString("Freq: ");
  
  sei();
 168:	78 94       	sei
  while(1){
    //ждем установки флага от схемы захвата
    while(BitIsClear(TIFR, ICF1));
 16a:	08 e5       	ldi	r16, 0x58	; 88
 16c:	10 e0       	ldi	r17, 0x00	; 0
    //сохраняем значения таймеров
    Capt();
 16e:	0f 2e       	mov	r0, r31
 170:	f0 e1       	ldi	r31, 0x10	; 16
 172:	ef 2e       	mov	r14, r31
 174:	f7 e2       	ldi	r31, 0x27	; 39
 176:	ff 2e       	mov	r15, r31
 178:	f0 2d       	mov	r31, r0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 17a:	c0 e9       	ldi	r28, 0x90	; 144
 17c:	d1 e0       	ldi	r29, 0x01	; 1
  //LCD_SendString("Freq: ");
  
  sei();
  while(1){
    //ждем установки флага от схемы захвата
    while(BitIsClear(TIFR, ICF1));
 17e:	f8 01       	movw	r30, r16
 180:	80 81       	ld	r24, Z
 182:	85 ff       	sbrs	r24, 5
 184:	fc cf       	rjmp	.-8      	; 0x17e <main+0x24>
    //сохраняем значения таймеров
    Capt();
 186:	28 d0       	rcall	.+80     	; 0x1d8 <Capt>
 188:	97 01       	movw	r18, r14
 18a:	ce 01       	movw	r24, r28
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <main+0x32>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 190:	21 50       	subi	r18, 0x01	; 1
 192:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 194:	d1 f7       	brne	.-12     	; 0x18a <main+0x30>
    
    //задержка в 1 секунду
    _delay_ms(1000);    
    i++;
 196:	80 91 60 00 	lds	r24, 0x0060
 19a:	90 91 61 00 	lds	r25, 0x0061
 19e:	01 96       	adiw	r24, 0x01	; 1
 1a0:	90 93 61 00 	sts	0x0061, r25
 1a4:	80 93 60 00 	sts	0x0060, r24
    //ждем установки флага от схемы захвата
    while(BitIsClear(TIFR, ICF1));
 1a8:	f8 01       	movw	r30, r16
 1aa:	80 81       	ld	r24, Z
 1ac:	85 ff       	sbrs	r24, 5
 1ae:	fc cf       	rjmp	.-8      	; 0x1a8 <main+0x4e>
    //сохраняем значения таймеров
    Capt();
 1b0:	13 d0       	rcall	.+38     	; 0x1d8 <Capt>

    //вычисляем значение частоты и выводим на lcd
	TIM_Calculation();
 1b2:	7e d0       	rcall	.+252    	; 0x2b0 <TIM_Calculation>
 1b4:	e4 cf       	rjmp	.-56     	; 0x17e <main+0x24>

000001b6 <TIM_Init>:
   /*инициализация таймера Т1
     -разрешение прерывания по переполнению
     -режим normal
     -захват по переднему фронту
     -предделитьель 1*/
   TIMSK |= (1<<TOIE1);
 1b6:	e9 e5       	ldi	r30, 0x59	; 89
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	84 60       	ori	r24, 0x04	; 4
 1be:	80 83       	st	Z, r24
   TCCR1A=(0<<COM1A1)|(0<<COM1A0)|(0<<WGM11)|(0<<WGM10); 
 1c0:	1f bc       	out	0x2f, r1	; 47
   TCCR1B=(0<ICNC1)|(1<<ICES1)|(0<<WGM13)|(0<<WGM12)|(0<<CS12)|(0<<CS11)|(1<<CS10); 
 1c2:	81 e4       	ldi	r24, 0x41	; 65
 1c4:	8e bd       	out	0x2e, r24	; 46
   TCNT1 = 0;
 1c6:	1d bc       	out	0x2d, r1	; 45
 1c8:	1c bc       	out	0x2c, r1	; 44
   
   /*инициализация таймера Т0
      -разрешение прерывания по переполнению
      -тактовый сигнал - внешний с вывода Т0*/
   TIMSK |= (1<<TOIE0);
 1ca:	80 81       	ld	r24, Z
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	80 83       	st	Z, r24
   TCCR0 = (1<<CS02)|(1<<CS01)|(1<<CS00);
 1d0:	87 e0       	ldi	r24, 0x07	; 7
 1d2:	83 bf       	out	0x33, r24	; 51
   TCNT0 = 0;
 1d4:	12 be       	out	0x32, r1	; 50
}
 1d6:	08 95       	ret

000001d8 <Capt>:
unsigned char bufTCNT0;
unsigned int bufICR1;
unsigned int bufTimer0;
unsigned int bufTimer1;

   cli();
 1d8:	f8 94       	cli
   bufTCNT0 = TCNT0;   
 1da:	62 b7       	in	r22, 0x32	; 50
   bufTimer0 = timer0;
 1dc:	20 91 62 00 	lds	r18, 0x0062
 1e0:	30 91 63 00 	lds	r19, 0x0063
   bufICR1 =  TCNT1;
 1e4:	ec b5       	in	r30, 0x2c	; 44
 1e6:	fd b5       	in	r31, 0x2d	; 45
   bufTimer1 = timer1;
 1e8:	40 91 64 00 	lds	r20, 0x0064
 1ec:	50 91 65 00 	lds	r21, 0x0065
   sei();
 1f0:	78 94       	sei
  
  tcnt01 = tcnt02;
 1f2:	80 91 6c 00 	lds	r24, 0x006C
 1f6:	90 91 6d 00 	lds	r25, 0x006D
 1fa:	90 93 6b 00 	sts	0x006B, r25
 1fe:	80 93 6a 00 	sts	0x006A, r24
  tcnt02 = bufTCNT0;
 202:	60 93 6c 00 	sts	0x006C, r22
 206:	10 92 6d 00 	sts	0x006D, r1
  
  saveTimer01 = saveTimer02;
 20a:	80 91 70 00 	lds	r24, 0x0070
 20e:	90 91 71 00 	lds	r25, 0x0071
 212:	90 93 6f 00 	sts	0x006F, r25
 216:	80 93 6e 00 	sts	0x006E, r24
  saveTimer02 = bufTimer0;
 21a:	30 93 71 00 	sts	0x0071, r19
 21e:	20 93 70 00 	sts	0x0070, r18
  
  saveTimer11 = saveTimer12;
 222:	80 91 74 00 	lds	r24, 0x0074
 226:	90 91 75 00 	lds	r25, 0x0075
 22a:	90 93 73 00 	sts	0x0073, r25
 22e:	80 93 72 00 	sts	0x0072, r24
  saveTimer12 = bufTimer1;
 232:	50 93 75 00 	sts	0x0075, r21
 236:	40 93 74 00 	sts	0x0074, r20
  
  icr11 = icr12;
 23a:	80 91 68 00 	lds	r24, 0x0068
 23e:	90 91 69 00 	lds	r25, 0x0069
 242:	90 93 67 00 	sts	0x0067, r25
 246:	80 93 66 00 	sts	0x0066, r24
  icr12 = bufICR1;   
 24a:	f0 93 69 00 	sts	0x0069, r31
 24e:	e0 93 68 00 	sts	0x0068, r30
}
 252:	08 95       	ret

00000254 <__vector_8>:


ISR(TIMER1_OVF_vect)
{
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	8f 93       	push	r24
 260:	9f 93       	push	r25
   timer1++;  
 262:	80 91 64 00 	lds	r24, 0x0064
 266:	90 91 65 00 	lds	r25, 0x0065
 26a:	01 96       	adiw	r24, 0x01	; 1
 26c:	90 93 65 00 	sts	0x0065, r25
 270:	80 93 64 00 	sts	0x0064, r24
}
 274:	9f 91       	pop	r25
 276:	8f 91       	pop	r24
 278:	0f 90       	pop	r0
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	0f 90       	pop	r0
 27e:	1f 90       	pop	r1
 280:	18 95       	reti

00000282 <__vector_9>:

ISR(TIMER0_OVF_vect)
{  
 282:	1f 92       	push	r1
 284:	0f 92       	push	r0
 286:	0f b6       	in	r0, 0x3f	; 63
 288:	0f 92       	push	r0
 28a:	11 24       	eor	r1, r1
 28c:	8f 93       	push	r24
 28e:	9f 93       	push	r25
   timer0++;   
 290:	80 91 62 00 	lds	r24, 0x0062
 294:	90 91 63 00 	lds	r25, 0x0063
 298:	01 96       	adiw	r24, 0x01	; 1
 29a:	90 93 63 00 	sts	0x0063, r25
 29e:	80 93 62 00 	sts	0x0062, r24
}
 2a2:	9f 91       	pop	r25
 2a4:	8f 91       	pop	r24
 2a6:	0f 90       	pop	r0
 2a8:	0f be       	out	0x3f, r0	; 63
 2aa:	0f 90       	pop	r0
 2ac:	1f 90       	pop	r1
 2ae:	18 95       	reti

000002b0 <TIM_Calculation>:


void TIM_Calculation(void)
{
 2b0:	af 92       	push	r10
 2b2:	bf 92       	push	r11
 2b4:	cf 92       	push	r12
 2b6:	df 92       	push	r13
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
  /*unsigned long baseImp;
  unsigned long mesurImp;
  unsigned long result;*/
 
  cli(); 
 2c0:	f8 94       	cli
  //вычисляем количество импульсов тактового сигнала
  saveTimer12 = saveTimer12 - saveTimer11;
 2c2:	20 91 74 00 	lds	r18, 0x0074
 2c6:	30 91 75 00 	lds	r19, 0x0075
 2ca:	80 91 72 00 	lds	r24, 0x0072
 2ce:	90 91 73 00 	lds	r25, 0x0073
 2d2:	28 1b       	sub	r18, r24
 2d4:	39 0b       	sbc	r19, r25
 2d6:	30 93 75 00 	sts	0x0075, r19
 2da:	20 93 74 00 	sts	0x0074, r18
  baseImp = (icr12 + (unsigned long)saveTimer12*65536) - icr11;
 2de:	a0 90 68 00 	lds	r10, 0x0068
 2e2:	b0 90 69 00 	lds	r11, 0x0069
 2e6:	cc 24       	eor	r12, r12
 2e8:	dd 24       	eor	r13, r13
 2ea:	80 91 66 00 	lds	r24, 0x0066
 2ee:	90 91 67 00 	lds	r25, 0x0067
 2f2:	a0 e0       	ldi	r26, 0x00	; 0
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	a8 1a       	sub	r10, r24
 2f8:	b9 0a       	sbc	r11, r25
 2fa:	ca 0a       	sbc	r12, r26
 2fc:	db 0a       	sbc	r13, r27
 2fe:	40 e0       	ldi	r20, 0x00	; 0
 300:	50 e0       	ldi	r21, 0x00	; 0
 302:	a9 01       	movw	r20, r18
 304:	33 27       	eor	r19, r19
 306:	22 27       	eor	r18, r18
 308:	a2 0e       	add	r10, r18
 30a:	b3 1e       	adc	r11, r19
 30c:	c4 1e       	adc	r12, r20
 30e:	d5 1e       	adc	r13, r21
 310:	a0 92 86 00 	sts	0x0086, r10
 314:	b0 92 87 00 	sts	0x0087, r11
 318:	c0 92 88 00 	sts	0x0088, r12
 31c:	d0 92 89 00 	sts	0x0089, r13
  
  //вычисляем количество импульсов измеряемого сигнала
  saveTimer02 = saveTimer02 - saveTimer01;
 320:	e0 90 70 00 	lds	r14, 0x0070
 324:	f0 90 71 00 	lds	r15, 0x0071
 328:	80 91 6e 00 	lds	r24, 0x006E
 32c:	90 91 6f 00 	lds	r25, 0x006F
 330:	e8 1a       	sub	r14, r24
 332:	f9 0a       	sbc	r15, r25
 334:	f0 92 71 00 	sts	0x0071, r15
 338:	e0 92 70 00 	sts	0x0070, r14
  mesurImp = ((tcnt02 + (unsigned  long)saveTimer02*256) - tcnt01)*10;
 33c:	60 91 6c 00 	lds	r22, 0x006C
 340:	70 91 6d 00 	lds	r23, 0x006D
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	20 91 6a 00 	lds	r18, 0x006A
 34c:	30 91 6b 00 	lds	r19, 0x006B
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	62 1b       	sub	r22, r18
 356:	73 0b       	sbc	r23, r19
 358:	84 0b       	sbc	r24, r20
 35a:	95 0b       	sbc	r25, r21
 35c:	00 e0       	ldi	r16, 0x00	; 0
 35e:	10 e0       	ldi	r17, 0x00	; 0
 360:	10 2f       	mov	r17, r16
 362:	0f 2d       	mov	r16, r15
 364:	fe 2c       	mov	r15, r14
 366:	ee 24       	eor	r14, r14
 368:	6e 0d       	add	r22, r14
 36a:	7f 1d       	adc	r23, r15
 36c:	80 1f       	adc	r24, r16
 36e:	91 1f       	adc	r25, r17
 370:	2a e0       	ldi	r18, 0x0A	; 10
 372:	30 e0       	ldi	r19, 0x00	; 0
 374:	40 e0       	ldi	r20, 0x00	; 0
 376:	50 e0       	ldi	r21, 0x00	; 0
 378:	d9 d1       	rcall	.+946    	; 0x72c <__mulsi3>
 37a:	60 93 7e 00 	sts	0x007E, r22
 37e:	70 93 7f 00 	sts	0x007F, r23
 382:	80 93 80 00 	sts	0x0080, r24
 386:	90 93 81 00 	sts	0x0081, r25
  
  //вычисляем значение частоты
  //из за проблем с типом long long пришлось пожертвовать точностью
  //и вычислять частоту по формуле:
  //result = (((16000000UL*200)/baseImp)*mesurImp)/20;
  result = 16000000.0*(float)mesurImp/(float)baseImp;
 38a:	df d0       	rcall	.+446    	; 0x54a <__floatunsisf>
 38c:	20 e0       	ldi	r18, 0x00	; 0
 38e:	34 e2       	ldi	r19, 0x24	; 36
 390:	44 e7       	ldi	r20, 0x74	; 116
 392:	5b e4       	ldi	r21, 0x4B	; 75
 394:	68 d1       	rcall	.+720    	; 0x666 <__mulsf3>
 396:	7b 01       	movw	r14, r22
 398:	8c 01       	movw	r16, r24
 39a:	c6 01       	movw	r24, r12
 39c:	b5 01       	movw	r22, r10
 39e:	d5 d0       	rcall	.+426    	; 0x54a <__floatunsisf>
 3a0:	9b 01       	movw	r18, r22
 3a2:	ac 01       	movw	r20, r24
 3a4:	c8 01       	movw	r24, r16
 3a6:	b7 01       	movw	r22, r14
 3a8:	3c d0       	rcall	.+120    	; 0x422 <__divsf3>
 3aa:	a3 d0       	rcall	.+326    	; 0x4f2 <__fixunssfsi>
 3ac:	60 93 82 00 	sts	0x0082, r22
 3b0:	70 93 83 00 	sts	0x0083, r23
 3b4:	80 93 84 00 	sts	0x0084, r24
 3b8:	90 93 85 00 	sts	0x0085, r25
  
   //выводим на дисплей частоту
  //LCD_Goto(7,0);
  BCD_LongLcd(result, 8, 1); 
 3bc:	48 e0       	ldi	r20, 0x08	; 8
 3be:	21 e0       	ldi	r18, 0x01	; 1
 3c0:	45 de       	rcall	.-886    	; 0x4c <BCD_LongLcd>
  //и для отладки количество опорных и входных импульсов
  //LCD_Goto(8,1);
  BCD_LongLcd(baseImp, 8,0); 
 3c2:	60 91 86 00 	lds	r22, 0x0086
 3c6:	70 91 87 00 	lds	r23, 0x0087
 3ca:	80 91 88 00 	lds	r24, 0x0088
 3ce:	90 91 89 00 	lds	r25, 0x0089
 3d2:	48 e0       	ldi	r20, 0x08	; 8
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	3a de       	rcall	.-908    	; 0x4c <BCD_LongLcd>
  //LCD_Goto(0,1);
  BCD_LongLcd(mesurImp, 7, 0);
 3d8:	60 91 7e 00 	lds	r22, 0x007E
 3dc:	70 91 7f 00 	lds	r23, 0x007F
 3e0:	80 91 80 00 	lds	r24, 0x0080
 3e4:	90 91 81 00 	lds	r25, 0x0081
 3e8:	47 e0       	ldi	r20, 0x07	; 7
 3ea:	20 e0       	ldi	r18, 0x00	; 0
 3ec:	2f de       	rcall	.-930    	; 0x4c <BCD_LongLcd>
  
  saveTimer01 = 0;
 3ee:	10 92 6f 00 	sts	0x006F, r1
 3f2:	10 92 6e 00 	sts	0x006E, r1
  saveTimer02 = 0;  
 3f6:	10 92 71 00 	sts	0x0071, r1
 3fa:	10 92 70 00 	sts	0x0070, r1
  saveTimer11 = 0;
 3fe:	10 92 73 00 	sts	0x0073, r1
 402:	10 92 72 00 	sts	0x0072, r1
  saveTimer12 = 0;
 406:	10 92 75 00 	sts	0x0075, r1
 40a:	10 92 74 00 	sts	0x0074, r1
  sei();
 40e:	78 94       	sei
}
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	ff 90       	pop	r15
 416:	ef 90       	pop	r14
 418:	df 90       	pop	r13
 41a:	cf 90       	pop	r12
 41c:	bf 90       	pop	r11
 41e:	af 90       	pop	r10
 420:	08 95       	ret

00000422 <__divsf3>:
 422:	0c d0       	rcall	.+24     	; 0x43c <__divsf3x>
 424:	e6 c0       	rjmp	.+460    	; 0x5f2 <__fp_round>
 426:	de d0       	rcall	.+444    	; 0x5e4 <__fp_pscB>
 428:	40 f0       	brcs	.+16     	; 0x43a <__divsf3+0x18>
 42a:	d5 d0       	rcall	.+426    	; 0x5d6 <__fp_pscA>
 42c:	30 f0       	brcs	.+12     	; 0x43a <__divsf3+0x18>
 42e:	21 f4       	brne	.+8      	; 0x438 <__divsf3+0x16>
 430:	5f 3f       	cpi	r21, 0xFF	; 255
 432:	19 f0       	breq	.+6      	; 0x43a <__divsf3+0x18>
 434:	c7 c0       	rjmp	.+398    	; 0x5c4 <__fp_inf>
 436:	51 11       	cpse	r21, r1
 438:	10 c1       	rjmp	.+544    	; 0x65a <__fp_szero>
 43a:	ca c0       	rjmp	.+404    	; 0x5d0 <__fp_nan>

0000043c <__divsf3x>:
 43c:	eb d0       	rcall	.+470    	; 0x614 <__fp_split3>
 43e:	98 f3       	brcs	.-26     	; 0x426 <__divsf3+0x4>

00000440 <__divsf3_pse>:
 440:	99 23       	and	r25, r25
 442:	c9 f3       	breq	.-14     	; 0x436 <__divsf3+0x14>
 444:	55 23       	and	r21, r21
 446:	b1 f3       	breq	.-20     	; 0x434 <__divsf3+0x12>
 448:	95 1b       	sub	r25, r21
 44a:	55 0b       	sbc	r21, r21
 44c:	bb 27       	eor	r27, r27
 44e:	aa 27       	eor	r26, r26
 450:	62 17       	cp	r22, r18
 452:	73 07       	cpc	r23, r19
 454:	84 07       	cpc	r24, r20
 456:	38 f0       	brcs	.+14     	; 0x466 <__divsf3_pse+0x26>
 458:	9f 5f       	subi	r25, 0xFF	; 255
 45a:	5f 4f       	sbci	r21, 0xFF	; 255
 45c:	22 0f       	add	r18, r18
 45e:	33 1f       	adc	r19, r19
 460:	44 1f       	adc	r20, r20
 462:	aa 1f       	adc	r26, r26
 464:	a9 f3       	breq	.-22     	; 0x450 <__divsf3_pse+0x10>
 466:	33 d0       	rcall	.+102    	; 0x4ce <__divsf3_pse+0x8e>
 468:	0e 2e       	mov	r0, r30
 46a:	3a f0       	brmi	.+14     	; 0x47a <__divsf3_pse+0x3a>
 46c:	e0 e8       	ldi	r30, 0x80	; 128
 46e:	30 d0       	rcall	.+96     	; 0x4d0 <__divsf3_pse+0x90>
 470:	91 50       	subi	r25, 0x01	; 1
 472:	50 40       	sbci	r21, 0x00	; 0
 474:	e6 95       	lsr	r30
 476:	00 1c       	adc	r0, r0
 478:	ca f7       	brpl	.-14     	; 0x46c <__divsf3_pse+0x2c>
 47a:	29 d0       	rcall	.+82     	; 0x4ce <__divsf3_pse+0x8e>
 47c:	fe 2f       	mov	r31, r30
 47e:	27 d0       	rcall	.+78     	; 0x4ce <__divsf3_pse+0x8e>
 480:	66 0f       	add	r22, r22
 482:	77 1f       	adc	r23, r23
 484:	88 1f       	adc	r24, r24
 486:	bb 1f       	adc	r27, r27
 488:	26 17       	cp	r18, r22
 48a:	37 07       	cpc	r19, r23
 48c:	48 07       	cpc	r20, r24
 48e:	ab 07       	cpc	r26, r27
 490:	b0 e8       	ldi	r27, 0x80	; 128
 492:	09 f0       	breq	.+2      	; 0x496 <__divsf3_pse+0x56>
 494:	bb 0b       	sbc	r27, r27
 496:	80 2d       	mov	r24, r0
 498:	bf 01       	movw	r22, r30
 49a:	ff 27       	eor	r31, r31
 49c:	93 58       	subi	r25, 0x83	; 131
 49e:	5f 4f       	sbci	r21, 0xFF	; 255
 4a0:	2a f0       	brmi	.+10     	; 0x4ac <__divsf3_pse+0x6c>
 4a2:	9e 3f       	cpi	r25, 0xFE	; 254
 4a4:	51 05       	cpc	r21, r1
 4a6:	68 f0       	brcs	.+26     	; 0x4c2 <__divsf3_pse+0x82>
 4a8:	8d c0       	rjmp	.+282    	; 0x5c4 <__fp_inf>
 4aa:	d7 c0       	rjmp	.+430    	; 0x65a <__fp_szero>
 4ac:	5f 3f       	cpi	r21, 0xFF	; 255
 4ae:	ec f3       	brlt	.-6      	; 0x4aa <__divsf3_pse+0x6a>
 4b0:	98 3e       	cpi	r25, 0xE8	; 232
 4b2:	dc f3       	brlt	.-10     	; 0x4aa <__divsf3_pse+0x6a>
 4b4:	86 95       	lsr	r24
 4b6:	77 95       	ror	r23
 4b8:	67 95       	ror	r22
 4ba:	b7 95       	ror	r27
 4bc:	f7 95       	ror	r31
 4be:	9f 5f       	subi	r25, 0xFF	; 255
 4c0:	c9 f7       	brne	.-14     	; 0x4b4 <__divsf3_pse+0x74>
 4c2:	88 0f       	add	r24, r24
 4c4:	91 1d       	adc	r25, r1
 4c6:	96 95       	lsr	r25
 4c8:	87 95       	ror	r24
 4ca:	97 f9       	bld	r25, 7
 4cc:	08 95       	ret
 4ce:	e1 e0       	ldi	r30, 0x01	; 1
 4d0:	66 0f       	add	r22, r22
 4d2:	77 1f       	adc	r23, r23
 4d4:	88 1f       	adc	r24, r24
 4d6:	bb 1f       	adc	r27, r27
 4d8:	62 17       	cp	r22, r18
 4da:	73 07       	cpc	r23, r19
 4dc:	84 07       	cpc	r24, r20
 4de:	ba 07       	cpc	r27, r26
 4e0:	20 f0       	brcs	.+8      	; 0x4ea <__divsf3_pse+0xaa>
 4e2:	62 1b       	sub	r22, r18
 4e4:	73 0b       	sbc	r23, r19
 4e6:	84 0b       	sbc	r24, r20
 4e8:	ba 0b       	sbc	r27, r26
 4ea:	ee 1f       	adc	r30, r30
 4ec:	88 f7       	brcc	.-30     	; 0x4d0 <__divsf3_pse+0x90>
 4ee:	e0 95       	com	r30
 4f0:	08 95       	ret

000004f2 <__fixunssfsi>:
 4f2:	98 d0       	rcall	.+304    	; 0x624 <__fp_splitA>
 4f4:	88 f0       	brcs	.+34     	; 0x518 <__fixunssfsi+0x26>
 4f6:	9f 57       	subi	r25, 0x7F	; 127
 4f8:	90 f0       	brcs	.+36     	; 0x51e <__fixunssfsi+0x2c>
 4fa:	b9 2f       	mov	r27, r25
 4fc:	99 27       	eor	r25, r25
 4fe:	b7 51       	subi	r27, 0x17	; 23
 500:	a0 f0       	brcs	.+40     	; 0x52a <__fixunssfsi+0x38>
 502:	d1 f0       	breq	.+52     	; 0x538 <__fixunssfsi+0x46>
 504:	66 0f       	add	r22, r22
 506:	77 1f       	adc	r23, r23
 508:	88 1f       	adc	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	1a f0       	brmi	.+6      	; 0x514 <__fixunssfsi+0x22>
 50e:	ba 95       	dec	r27
 510:	c9 f7       	brne	.-14     	; 0x504 <__fixunssfsi+0x12>
 512:	12 c0       	rjmp	.+36     	; 0x538 <__fixunssfsi+0x46>
 514:	b1 30       	cpi	r27, 0x01	; 1
 516:	81 f0       	breq	.+32     	; 0x538 <__fixunssfsi+0x46>
 518:	9f d0       	rcall	.+318    	; 0x658 <__fp_zero>
 51a:	b1 e0       	ldi	r27, 0x01	; 1
 51c:	08 95       	ret
 51e:	9c c0       	rjmp	.+312    	; 0x658 <__fp_zero>
 520:	67 2f       	mov	r22, r23
 522:	78 2f       	mov	r23, r24
 524:	88 27       	eor	r24, r24
 526:	b8 5f       	subi	r27, 0xF8	; 248
 528:	39 f0       	breq	.+14     	; 0x538 <__fixunssfsi+0x46>
 52a:	b9 3f       	cpi	r27, 0xF9	; 249
 52c:	cc f3       	brlt	.-14     	; 0x520 <__fixunssfsi+0x2e>
 52e:	86 95       	lsr	r24
 530:	77 95       	ror	r23
 532:	67 95       	ror	r22
 534:	b3 95       	inc	r27
 536:	d9 f7       	brne	.-10     	; 0x52e <__fixunssfsi+0x3c>
 538:	3e f4       	brtc	.+14     	; 0x548 <__fixunssfsi+0x56>
 53a:	90 95       	com	r25
 53c:	80 95       	com	r24
 53e:	70 95       	com	r23
 540:	61 95       	neg	r22
 542:	7f 4f       	sbci	r23, 0xFF	; 255
 544:	8f 4f       	sbci	r24, 0xFF	; 255
 546:	9f 4f       	sbci	r25, 0xFF	; 255
 548:	08 95       	ret

0000054a <__floatunsisf>:
 54a:	e8 94       	clt
 54c:	09 c0       	rjmp	.+18     	; 0x560 <__floatsisf+0x12>

0000054e <__floatsisf>:
 54e:	97 fb       	bst	r25, 7
 550:	3e f4       	brtc	.+14     	; 0x560 <__floatsisf+0x12>
 552:	90 95       	com	r25
 554:	80 95       	com	r24
 556:	70 95       	com	r23
 558:	61 95       	neg	r22
 55a:	7f 4f       	sbci	r23, 0xFF	; 255
 55c:	8f 4f       	sbci	r24, 0xFF	; 255
 55e:	9f 4f       	sbci	r25, 0xFF	; 255
 560:	99 23       	and	r25, r25
 562:	a9 f0       	breq	.+42     	; 0x58e <__floatsisf+0x40>
 564:	f9 2f       	mov	r31, r25
 566:	96 e9       	ldi	r25, 0x96	; 150
 568:	bb 27       	eor	r27, r27
 56a:	93 95       	inc	r25
 56c:	f6 95       	lsr	r31
 56e:	87 95       	ror	r24
 570:	77 95       	ror	r23
 572:	67 95       	ror	r22
 574:	b7 95       	ror	r27
 576:	f1 11       	cpse	r31, r1
 578:	f8 cf       	rjmp	.-16     	; 0x56a <__floatsisf+0x1c>
 57a:	fa f4       	brpl	.+62     	; 0x5ba <__floatsisf+0x6c>
 57c:	bb 0f       	add	r27, r27
 57e:	11 f4       	brne	.+4      	; 0x584 <__floatsisf+0x36>
 580:	60 ff       	sbrs	r22, 0
 582:	1b c0       	rjmp	.+54     	; 0x5ba <__floatsisf+0x6c>
 584:	6f 5f       	subi	r22, 0xFF	; 255
 586:	7f 4f       	sbci	r23, 0xFF	; 255
 588:	8f 4f       	sbci	r24, 0xFF	; 255
 58a:	9f 4f       	sbci	r25, 0xFF	; 255
 58c:	16 c0       	rjmp	.+44     	; 0x5ba <__floatsisf+0x6c>
 58e:	88 23       	and	r24, r24
 590:	11 f0       	breq	.+4      	; 0x596 <__floatsisf+0x48>
 592:	96 e9       	ldi	r25, 0x96	; 150
 594:	11 c0       	rjmp	.+34     	; 0x5b8 <__floatsisf+0x6a>
 596:	77 23       	and	r23, r23
 598:	21 f0       	breq	.+8      	; 0x5a2 <__floatsisf+0x54>
 59a:	9e e8       	ldi	r25, 0x8E	; 142
 59c:	87 2f       	mov	r24, r23
 59e:	76 2f       	mov	r23, r22
 5a0:	05 c0       	rjmp	.+10     	; 0x5ac <__floatsisf+0x5e>
 5a2:	66 23       	and	r22, r22
 5a4:	71 f0       	breq	.+28     	; 0x5c2 <__floatsisf+0x74>
 5a6:	96 e8       	ldi	r25, 0x86	; 134
 5a8:	86 2f       	mov	r24, r22
 5aa:	70 e0       	ldi	r23, 0x00	; 0
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	2a f0       	brmi	.+10     	; 0x5ba <__floatsisf+0x6c>
 5b0:	9a 95       	dec	r25
 5b2:	66 0f       	add	r22, r22
 5b4:	77 1f       	adc	r23, r23
 5b6:	88 1f       	adc	r24, r24
 5b8:	da f7       	brpl	.-10     	; 0x5b0 <__floatsisf+0x62>
 5ba:	88 0f       	add	r24, r24
 5bc:	96 95       	lsr	r25
 5be:	87 95       	ror	r24
 5c0:	97 f9       	bld	r25, 7
 5c2:	08 95       	ret

000005c4 <__fp_inf>:
 5c4:	97 f9       	bld	r25, 7
 5c6:	9f 67       	ori	r25, 0x7F	; 127
 5c8:	80 e8       	ldi	r24, 0x80	; 128
 5ca:	70 e0       	ldi	r23, 0x00	; 0
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	08 95       	ret

000005d0 <__fp_nan>:
 5d0:	9f ef       	ldi	r25, 0xFF	; 255
 5d2:	80 ec       	ldi	r24, 0xC0	; 192
 5d4:	08 95       	ret

000005d6 <__fp_pscA>:
 5d6:	00 24       	eor	r0, r0
 5d8:	0a 94       	dec	r0
 5da:	16 16       	cp	r1, r22
 5dc:	17 06       	cpc	r1, r23
 5de:	18 06       	cpc	r1, r24
 5e0:	09 06       	cpc	r0, r25
 5e2:	08 95       	ret

000005e4 <__fp_pscB>:
 5e4:	00 24       	eor	r0, r0
 5e6:	0a 94       	dec	r0
 5e8:	12 16       	cp	r1, r18
 5ea:	13 06       	cpc	r1, r19
 5ec:	14 06       	cpc	r1, r20
 5ee:	05 06       	cpc	r0, r21
 5f0:	08 95       	ret

000005f2 <__fp_round>:
 5f2:	09 2e       	mov	r0, r25
 5f4:	03 94       	inc	r0
 5f6:	00 0c       	add	r0, r0
 5f8:	11 f4       	brne	.+4      	; 0x5fe <__fp_round+0xc>
 5fa:	88 23       	and	r24, r24
 5fc:	52 f0       	brmi	.+20     	; 0x612 <__fp_round+0x20>
 5fe:	bb 0f       	add	r27, r27
 600:	40 f4       	brcc	.+16     	; 0x612 <__fp_round+0x20>
 602:	bf 2b       	or	r27, r31
 604:	11 f4       	brne	.+4      	; 0x60a <__fp_round+0x18>
 606:	60 ff       	sbrs	r22, 0
 608:	04 c0       	rjmp	.+8      	; 0x612 <__fp_round+0x20>
 60a:	6f 5f       	subi	r22, 0xFF	; 255
 60c:	7f 4f       	sbci	r23, 0xFF	; 255
 60e:	8f 4f       	sbci	r24, 0xFF	; 255
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	08 95       	ret

00000614 <__fp_split3>:
 614:	57 fd       	sbrc	r21, 7
 616:	90 58       	subi	r25, 0x80	; 128
 618:	44 0f       	add	r20, r20
 61a:	55 1f       	adc	r21, r21
 61c:	59 f0       	breq	.+22     	; 0x634 <__fp_splitA+0x10>
 61e:	5f 3f       	cpi	r21, 0xFF	; 255
 620:	71 f0       	breq	.+28     	; 0x63e <__fp_splitA+0x1a>
 622:	47 95       	ror	r20

00000624 <__fp_splitA>:
 624:	88 0f       	add	r24, r24
 626:	97 fb       	bst	r25, 7
 628:	99 1f       	adc	r25, r25
 62a:	61 f0       	breq	.+24     	; 0x644 <__fp_splitA+0x20>
 62c:	9f 3f       	cpi	r25, 0xFF	; 255
 62e:	79 f0       	breq	.+30     	; 0x64e <__fp_splitA+0x2a>
 630:	87 95       	ror	r24
 632:	08 95       	ret
 634:	12 16       	cp	r1, r18
 636:	13 06       	cpc	r1, r19
 638:	14 06       	cpc	r1, r20
 63a:	55 1f       	adc	r21, r21
 63c:	f2 cf       	rjmp	.-28     	; 0x622 <__fp_split3+0xe>
 63e:	46 95       	lsr	r20
 640:	f1 df       	rcall	.-30     	; 0x624 <__fp_splitA>
 642:	08 c0       	rjmp	.+16     	; 0x654 <__fp_splitA+0x30>
 644:	16 16       	cp	r1, r22
 646:	17 06       	cpc	r1, r23
 648:	18 06       	cpc	r1, r24
 64a:	99 1f       	adc	r25, r25
 64c:	f1 cf       	rjmp	.-30     	; 0x630 <__fp_splitA+0xc>
 64e:	86 95       	lsr	r24
 650:	71 05       	cpc	r23, r1
 652:	61 05       	cpc	r22, r1
 654:	08 94       	sec
 656:	08 95       	ret

00000658 <__fp_zero>:
 658:	e8 94       	clt

0000065a <__fp_szero>:
 65a:	bb 27       	eor	r27, r27
 65c:	66 27       	eor	r22, r22
 65e:	77 27       	eor	r23, r23
 660:	cb 01       	movw	r24, r22
 662:	97 f9       	bld	r25, 7
 664:	08 95       	ret

00000666 <__mulsf3>:
 666:	0b d0       	rcall	.+22     	; 0x67e <__mulsf3x>
 668:	c4 cf       	rjmp	.-120    	; 0x5f2 <__fp_round>
 66a:	b5 df       	rcall	.-150    	; 0x5d6 <__fp_pscA>
 66c:	28 f0       	brcs	.+10     	; 0x678 <__mulsf3+0x12>
 66e:	ba df       	rcall	.-140    	; 0x5e4 <__fp_pscB>
 670:	18 f0       	brcs	.+6      	; 0x678 <__mulsf3+0x12>
 672:	95 23       	and	r25, r21
 674:	09 f0       	breq	.+2      	; 0x678 <__mulsf3+0x12>
 676:	a6 cf       	rjmp	.-180    	; 0x5c4 <__fp_inf>
 678:	ab cf       	rjmp	.-170    	; 0x5d0 <__fp_nan>
 67a:	11 24       	eor	r1, r1
 67c:	ee cf       	rjmp	.-36     	; 0x65a <__fp_szero>

0000067e <__mulsf3x>:
 67e:	ca df       	rcall	.-108    	; 0x614 <__fp_split3>
 680:	a0 f3       	brcs	.-24     	; 0x66a <__mulsf3+0x4>

00000682 <__mulsf3_pse>:
 682:	95 9f       	mul	r25, r21
 684:	d1 f3       	breq	.-12     	; 0x67a <__mulsf3+0x14>
 686:	95 0f       	add	r25, r21
 688:	50 e0       	ldi	r21, 0x00	; 0
 68a:	55 1f       	adc	r21, r21
 68c:	62 9f       	mul	r22, r18
 68e:	f0 01       	movw	r30, r0
 690:	72 9f       	mul	r23, r18
 692:	bb 27       	eor	r27, r27
 694:	f0 0d       	add	r31, r0
 696:	b1 1d       	adc	r27, r1
 698:	63 9f       	mul	r22, r19
 69a:	aa 27       	eor	r26, r26
 69c:	f0 0d       	add	r31, r0
 69e:	b1 1d       	adc	r27, r1
 6a0:	aa 1f       	adc	r26, r26
 6a2:	64 9f       	mul	r22, r20
 6a4:	66 27       	eor	r22, r22
 6a6:	b0 0d       	add	r27, r0
 6a8:	a1 1d       	adc	r26, r1
 6aa:	66 1f       	adc	r22, r22
 6ac:	82 9f       	mul	r24, r18
 6ae:	22 27       	eor	r18, r18
 6b0:	b0 0d       	add	r27, r0
 6b2:	a1 1d       	adc	r26, r1
 6b4:	62 1f       	adc	r22, r18
 6b6:	73 9f       	mul	r23, r19
 6b8:	b0 0d       	add	r27, r0
 6ba:	a1 1d       	adc	r26, r1
 6bc:	62 1f       	adc	r22, r18
 6be:	83 9f       	mul	r24, r19
 6c0:	a0 0d       	add	r26, r0
 6c2:	61 1d       	adc	r22, r1
 6c4:	22 1f       	adc	r18, r18
 6c6:	74 9f       	mul	r23, r20
 6c8:	33 27       	eor	r19, r19
 6ca:	a0 0d       	add	r26, r0
 6cc:	61 1d       	adc	r22, r1
 6ce:	23 1f       	adc	r18, r19
 6d0:	84 9f       	mul	r24, r20
 6d2:	60 0d       	add	r22, r0
 6d4:	21 1d       	adc	r18, r1
 6d6:	82 2f       	mov	r24, r18
 6d8:	76 2f       	mov	r23, r22
 6da:	6a 2f       	mov	r22, r26
 6dc:	11 24       	eor	r1, r1
 6de:	9f 57       	subi	r25, 0x7F	; 127
 6e0:	50 40       	sbci	r21, 0x00	; 0
 6e2:	8a f0       	brmi	.+34     	; 0x706 <__mulsf3_pse+0x84>
 6e4:	e1 f0       	breq	.+56     	; 0x71e <__mulsf3_pse+0x9c>
 6e6:	88 23       	and	r24, r24
 6e8:	4a f0       	brmi	.+18     	; 0x6fc <__mulsf3_pse+0x7a>
 6ea:	ee 0f       	add	r30, r30
 6ec:	ff 1f       	adc	r31, r31
 6ee:	bb 1f       	adc	r27, r27
 6f0:	66 1f       	adc	r22, r22
 6f2:	77 1f       	adc	r23, r23
 6f4:	88 1f       	adc	r24, r24
 6f6:	91 50       	subi	r25, 0x01	; 1
 6f8:	50 40       	sbci	r21, 0x00	; 0
 6fa:	a9 f7       	brne	.-22     	; 0x6e6 <__mulsf3_pse+0x64>
 6fc:	9e 3f       	cpi	r25, 0xFE	; 254
 6fe:	51 05       	cpc	r21, r1
 700:	70 f0       	brcs	.+28     	; 0x71e <__mulsf3_pse+0x9c>
 702:	60 cf       	rjmp	.-320    	; 0x5c4 <__fp_inf>
 704:	aa cf       	rjmp	.-172    	; 0x65a <__fp_szero>
 706:	5f 3f       	cpi	r21, 0xFF	; 255
 708:	ec f3       	brlt	.-6      	; 0x704 <__mulsf3_pse+0x82>
 70a:	98 3e       	cpi	r25, 0xE8	; 232
 70c:	dc f3       	brlt	.-10     	; 0x704 <__mulsf3_pse+0x82>
 70e:	86 95       	lsr	r24
 710:	77 95       	ror	r23
 712:	67 95       	ror	r22
 714:	b7 95       	ror	r27
 716:	f7 95       	ror	r31
 718:	e7 95       	ror	r30
 71a:	9f 5f       	subi	r25, 0xFF	; 255
 71c:	c1 f7       	brne	.-16     	; 0x70e <__mulsf3_pse+0x8c>
 71e:	fe 2b       	or	r31, r30
 720:	88 0f       	add	r24, r24
 722:	91 1d       	adc	r25, r1
 724:	96 95       	lsr	r25
 726:	87 95       	ror	r24
 728:	97 f9       	bld	r25, 7
 72a:	08 95       	ret

0000072c <__mulsi3>:
 72c:	62 9f       	mul	r22, r18
 72e:	d0 01       	movw	r26, r0
 730:	73 9f       	mul	r23, r19
 732:	f0 01       	movw	r30, r0
 734:	82 9f       	mul	r24, r18
 736:	e0 0d       	add	r30, r0
 738:	f1 1d       	adc	r31, r1
 73a:	64 9f       	mul	r22, r20
 73c:	e0 0d       	add	r30, r0
 73e:	f1 1d       	adc	r31, r1
 740:	92 9f       	mul	r25, r18
 742:	f0 0d       	add	r31, r0
 744:	83 9f       	mul	r24, r19
 746:	f0 0d       	add	r31, r0
 748:	74 9f       	mul	r23, r20
 74a:	f0 0d       	add	r31, r0
 74c:	65 9f       	mul	r22, r21
 74e:	f0 0d       	add	r31, r0
 750:	99 27       	eor	r25, r25
 752:	72 9f       	mul	r23, r18
 754:	b0 0d       	add	r27, r0
 756:	e1 1d       	adc	r30, r1
 758:	f9 1f       	adc	r31, r25
 75a:	63 9f       	mul	r22, r19
 75c:	b0 0d       	add	r27, r0
 75e:	e1 1d       	adc	r30, r1
 760:	f9 1f       	adc	r31, r25
 762:	bd 01       	movw	r22, r26
 764:	cf 01       	movw	r24, r30
 766:	11 24       	eor	r1, r1
 768:	08 95       	ret

0000076a <__udivmodsi4>:
 76a:	a1 e2       	ldi	r26, 0x21	; 33
 76c:	1a 2e       	mov	r1, r26
 76e:	aa 1b       	sub	r26, r26
 770:	bb 1b       	sub	r27, r27
 772:	fd 01       	movw	r30, r26
 774:	0d c0       	rjmp	.+26     	; 0x790 <__udivmodsi4_ep>

00000776 <__udivmodsi4_loop>:
 776:	aa 1f       	adc	r26, r26
 778:	bb 1f       	adc	r27, r27
 77a:	ee 1f       	adc	r30, r30
 77c:	ff 1f       	adc	r31, r31
 77e:	a2 17       	cp	r26, r18
 780:	b3 07       	cpc	r27, r19
 782:	e4 07       	cpc	r30, r20
 784:	f5 07       	cpc	r31, r21
 786:	20 f0       	brcs	.+8      	; 0x790 <__udivmodsi4_ep>
 788:	a2 1b       	sub	r26, r18
 78a:	b3 0b       	sbc	r27, r19
 78c:	e4 0b       	sbc	r30, r20
 78e:	f5 0b       	sbc	r31, r21

00000790 <__udivmodsi4_ep>:
 790:	66 1f       	adc	r22, r22
 792:	77 1f       	adc	r23, r23
 794:	88 1f       	adc	r24, r24
 796:	99 1f       	adc	r25, r25
 798:	1a 94       	dec	r1
 79a:	69 f7       	brne	.-38     	; 0x776 <__udivmodsi4_loop>
 79c:	60 95       	com	r22
 79e:	70 95       	com	r23
 7a0:	80 95       	com	r24
 7a2:	90 95       	com	r25
 7a4:	9b 01       	movw	r18, r22
 7a6:	ac 01       	movw	r20, r24
 7a8:	bd 01       	movw	r22, r26
 7aa:	cf 01       	movw	r24, r30
 7ac:	08 95       	ret

000007ae <_exit>:
 7ae:	f8 94       	cli

000007b0 <__stop_program>:
 7b0:	ff cf       	rjmp	.-2      	; 0x7b0 <__stop_program>
