;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;void TIM_Init(void)
; 0003 0006 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 0007 /*инициализаци€ таймера “1
; 0003 0008 -разрешение прерывани€ по переполнению
; 0003 0009 -режим normal
; 0003 000A -захват по переднему фронту
; 0003 000B -предделитьель 1*/
; 0003 000C TIMSK |= (1 << TOIE1);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0003 000D TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << WGM11) | (0 << WGM10);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0003 000E TCCR1B = (0 < ICNC1) | (1 << ICES1) | (0 << WGM13) | (0 << WGM12) | (0 << CS12) | (0 << CS11) | (1 << CS10);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0003 000F TCNT1 = 0;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0003 0010 
; 0003 0011 /*инициализаци€ таймера “0
; 0003 0012 -разрешение прерывани€ по переполнению
; 0003 0013 -тактовый сигнал - внешний с вывода “0*/
; 0003 0014 TIMSK |= (1 << TOIE0);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0003 0015 TCCR0 = (1 << CS02) | (1 << CS01) | (1 << CS00);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0003 0016 TCNT0 = 0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0003 0017 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;void Capt(void)
; 0003 0025 {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0003 0026 unsigned char bufTCNT0;
; 0003 0027 unsigned int bufICR1;
; 0003 0028 unsigned int bufTimer0;
; 0003 0029 unsigned int bufTimer1;
; 0003 002A 
; 0003 002B #asm("cli");
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;	bufTCNT0 -> R17
;	bufICR1 -> R18,R19
;	bufTimer0 -> R20,R21
;	bufTimer1 -> Y+6
;PCODE: $00000025 VOL: 0
; 0003 002C bufTCNT0 = TCNT0;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0003 002D bufTimer0 = timer0;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 1
; 0003 002E bufICR1 =  TCNT1;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0003 002F bufTimer1 = timer1;
;PCODE: $0000002C VOL: 1
;PCODE: $0000002D VOL: 0
; 0003 0030 #asm("sei");
;PCODE: $0000002E VOL: 0
; 0003 0031 
; 0003 0032 tcnt01 = tcnt02;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0003 0033 tcnt02 = bufTCNT0;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0003 0034 
; 0003 0035 saveTimer01 = saveTimer02;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0003 0036 saveTimer02 = bufTimer0;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0003 0037 
; 0003 0038 saveTimer11 = saveTimer12;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0003 0039 saveTimer12 = bufTimer1;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0003 003A 
; 0003 003B icr11 = icr12;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0003 003C icr12 = bufICR1;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0003 003D }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;interrupt [9] void Tim1Ovf(void)
; 0003 0041 {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0003 0042 timer1++;
;PCODE: $00000046 VOL: 1
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0003 0043 }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;interrupt [10] void Tim0Ovf(void)
; 0003 0046 {
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0003 0047 timer0++;
;PCODE: $0000004F VOL: 1
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0003 0048 }
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;void TIM_Calculation(void)
; 0003 004C {
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0003 004D unsigned long baseImp;
; 0003 004E //unsigned long mesurImp;
; 0003 004F unsigned long mesurImp;
; 0003 0050 unsigned long result;
; 0003 0051 
; 0003 0052 #asm("cli");
;PCODE: $00000058 VOL: 0
;	baseImp -> Y+8
;	mesurImp -> Y+4
;	result -> Y+0
;PCODE: $00000059 VOL: 0
; 0003 0053 //вычисл€ем количество импульсов тактового сигнала
; 0003 0054 saveTimer12 = saveTimer12 - saveTimer11;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0003 0055 baseImp = (icr12 + (unsigned long)saveTimer12 * 65536) - icr11;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0003 0056 
; 0003 0057 //вычисл€ем количество импульсов измер€емого сигнала
; 0003 0058 saveTimer02 = saveTimer02 - saveTimer01;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0003 0059 mesurImp = ((tcnt02 + (unsigned  long)saveTimer02 * 256) - tcnt01) * 10;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0003 005A 
; 0003 005B //вычисл€ем значение частоты
; 0003 005C //вот здесь кос€к - мой CodeVision не поддерживает тип long long
; 0003 005D //поэтому пришлось написать не так
; 0003 005E //result = (16000000UL*(unsigned long long)mesurImp*10)/baseImp;
; 0003 005F //а так
; 0003 0060 //result = (((16000000UL*200)/baseImp)*mesurImp)/20;
; 0003 0061 //result = (((16000000UL)/baseImp)*mesurImp)/20;
; 0003 0062 result = 16000000.0*(float)mesurImp/(float)baseImp;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0003 0063 
; 0003 0064 //выводим на дисплей частоту
; 0003 0065 LCD_Goto(7, 0);
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0003 0066 BCD_LongLcd(result, 8, 1);
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0003 0067 //и дл€ отладки количество опорных и входных импульсов
; 0003 0068 LCD_Goto(8, 1);
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0003 0069 BCD_LongLcd(baseImp, 8, 0);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0003 006A LCD_Goto(0, 1);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0003 006B BCD_LongLcd(mesurImp, 7, 0);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0003 006C 
; 0003 006D saveTimer01 = 0;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0003 006E saveTimer02 = 0;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0003 006F saveTimer11 = 0;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0003 0070 saveTimer12 = 0;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0003 0071 #asm("sei");
;PCODE: $000000A5 VOL: 0
; 0003 0072 }
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
